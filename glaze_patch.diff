diff --git a/include/glaze/json/json_t.hpp b/include/glaze/json/json_t.hpp
index 6766612..3502a0f 100644
--- a/include/glaze/json/json_t.hpp
+++ b/include/glaze/json/json_t.hpp
@@ -164,6 +164,66 @@ namespace glz
          // Can be used for string_view and the like
          return get<std::string>();
       }
+      
+      [[nodiscard]] bool is_object() const noexcept { return holds<object_t>(); }
+      [[nodiscard]] bool is_array() const noexcept { return holds<array_t>(); }
+      [[nodiscard]] bool is_string() const noexcept { return holds<std::string>(); }
+      [[nodiscard]] bool is_number() const noexcept { return holds<double>(); }
+      [[nodiscard]] bool is_boolean() const noexcept { return holds<bool>(); }
+      [[nodiscard]] bool is_null() const noexcept { return holds<std::nullptr_t>(); }
+      
+      [[nodiscard]] array_t& get_array() noexcept { return get<array_t>(); }
+      [[nodiscard]] const array_t& get_array() const noexcept { return get<array_t>(); }
+
+      [[nodiscard]] object_t& get_object() noexcept { return get<object_t>(); }
+      [[nodiscard]] const object_t& get_object() const noexcept { return get<object_t>(); }
+
+      [[nodiscard]] double& get_number() noexcept { return get<double>(); }
+      [[nodiscard]] const double& get_number() const noexcept { return get<double>(); }
+
+      [[nodiscard]] std::string& get_string() noexcept { return get<std::string>(); }
+      [[nodiscard]] const std::string& get_string() const noexcept { return get<std::string>(); }
+
+      [[nodiscard]] bool& get_boolean() noexcept { return get<bool>(); }
+      [[nodiscard]] const bool& get_boolean() const noexcept { return get<bool>(); }
+      
+      // empty() returns true if the value is an empty JSON object, array, or string, or a null value
+      // otherwise returns false
+      [[nodiscard]] bool empty() const noexcept
+      {
+         if (auto* v = get_if<object_t>()) {
+            return v->empty();
+         }
+         else if (auto* v = get_if<array_t>()) {
+            return v->empty();
+         }
+         else if (auto* v = get_if<std::string>()) {
+            return v->empty();
+         }
+         else if (is_null()) {
+            return true;
+         }
+         else {
+            return false;
+         }
+      }
+      
+      // returns the count of items in an object or an array, or the size of a string, otherwise returns zero
+      [[nodiscard]] size_t size() const noexcept
+      {
+         if (auto* v = get_if<object_t>()) {
+            return v->size();
+         }
+         else if (auto* v = get_if<array_t>()) {
+            return v->size();
+         }
+         else if (auto* v = get_if<std::string>()) {
+            return v->size();
+         }
+         else {
+            return 0;
+         }
+      }
    };
 }
 
